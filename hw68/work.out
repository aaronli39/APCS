Aaron Li, Johnny Wong, Joan Chirinos
Team Rito
APCS1 pd8
01/12/18

1) C
2) D
3) D
4) E
5) E
6) C
7) A
8) A
9) C
10) D
11a)

public int nextTankToFill(int threshold) {
     int current = filler.getCurrentIndex;
     for (int i = 0; i < tanks.length; i++) {
          if (tanks[i].getFuelLevel() < threshold &&
               tanks[i].getFuelLevel() < tanks[current].getFuelLevel()) {
                    current = i;
               }
     } return current;
}

11b)

public void moveToLocation(int locIndex){
     if (getCurrentIndex() > locIndex && isFacingRight()) changeDirection();
     else if (getCurrentIndex() < locIndec && !(isFacingRight())) changeDirection();
     moveForward(Math.abs(getCurrentIndex() - locIndex));
}

12a)

private void fillBlock(String str) {
	for (int r = 0; r < numRows; r++) {
		for (int c = 0; c < numCols; c++) {
			int i = r + c * numRows
			if (i < str.length()) {
				letterBlock[r][c] = str.substring(i, i + 1);
			}
			else letterBlock[r][c] = "A";
		}
	}
}

12b)
public String encryptMessage(String message) {
      int cap = letterBlock[r].length * letterBlock[r][c].length;
      int initialCap = cap;
      int initialIndex = 0;
      String retStr = "";
      for (int times = 0; times < message.length() / cap; times++) {
          fillBlock(message.substring(initialIndex, cap);
          cap += initialCap;
          initialIndex += initialCap;
          for (int c = 0; c < numCols; c++){
              for (int r = 0; r < numRows; r++){
              retStr += letterBlock[r][c];
              }
          }
      }
      return retStr;
}
